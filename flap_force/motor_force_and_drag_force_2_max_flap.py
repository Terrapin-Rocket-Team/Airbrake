import math

def motor_force_and_drag_force_to_max_flap(force_motor, force_drag):
    """
    Calculates the maximum flap deployment angle (in degrees) given a motor force
    and drag force in the 2024/25 airbrake design.

    Args:
        force_motor (float): Force generated by the motor (any unit of force).
        force_drag (float): Drag force acting on one flap (same unit as force_motor).

    Returns:
        float: Maximum flap deployment angle in degrees.
    """

    # Geometric constants in inches
    length_flap_in = 4.5              # Length of the flap
    length_pushrod_hinge_in = 2       # Distance from pushrod connection to hinge
    length_clevis_in = 0.61           # Length of clevis (not used in calculation)

    # Conversion factor
    in_to_m = 0.0254                  # Inches to meters

    # Convert to metric units
    length_flap_m = length_flap_in * in_to_m
    length_pushrod_hinge_m = length_pushrod_hinge_in * in_to_m
    length_clevis_m = length_clevis_in * in_to_m  # For completeness

    # Force balance calculation
    x2 = force_motor * length_pushrod_hinge_m / (force_drag*4) # 4 flaps
    clamped_ratio = min(max(x2 / length_flap_m, -1), 1) # clamp

    theta_max_rad = math.asin(clamped_ratio)
    theta_max_deg = math.degrees(theta_max_rad)

    theta_max_deg = min(theta_max_deg, 75)
    theta_max_deg = max(theta_max_deg, 0)

    return theta_max_deg
